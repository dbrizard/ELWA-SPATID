
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_0_Waveprop.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_0_Waveprop.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_0_Waveprop.py:


Test :class:`Waveprop` class
============================

Define a :class:`Barhomo` bar and use it with :class:`Waveprop` to compute
elastic wave propagation in simple test cases.

.. GENERATED FROM PYTHON SOURCE LINES 8-17

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 5

    import matplotlib.pyplot as plt
    import numpy as np

    from prop1D import Waveprop, Barhomo, trapezeWave









.. GENERATED FROM PYTHON SOURCE LINES 18-19

Define material and geometrical parameters

.. GENERATED FROM PYTHON SOURCE LINES 19-24

.. code-block:: default

    E = 201e9  # Young modulus [Pa]
    rho = 7800  # Density [kg/m3]
    d = 0.020  # diameter [m]
    k = 2.4  # diamters ratio [-]








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Define the incident wave vector

.. GENERATED FROM PYTHON SOURCE LINES 26-31

.. code-block:: default


    incw = np.zeros(80)  # incident wave
    incw[0:20] = 1e3  # >0 means traction pulse









.. GENERATED FROM PYTHON SOURCE LINES 32-33

Create the bars

.. GENERATED FROM PYTHON SOURCE LINES 33-48

.. code-block:: default

    dx = 0.01  # length of an elementary Segment [m]
    n = 50  # number of Segments [-]
    D = np.ones(n) * d  # diameters of the Segments
    bb = Barhomo(dx, D, E, rho)  # constant section bar
    D2 = np.hstack((np.ones(n)*d, np.ones(n)*d*k))  # section change 
    b2 = Barhomo(dx, D2, E, rho)  # cross-section increase
    b3 = Barhomo(dx, D2[::-1], E, rho)  # cross-secction reduction

    # Visualize the bar:
    bb.plot()  # constant cross-section and constant impedance
    b2.plot()  # cross-section and impedance increase

    ## Cas test SANS coupures (barhomo)
    # premier cas test avec une barre uniforme




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_001.png
         :alt: plot 0 Waveprop
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_002.png
         :alt: plot 0 Waveprop
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_003.png
         :alt: plot 0 Waveprop
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_004.png
         :alt: plot 0 Waveprop
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_004.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 49-54

Free-free uniform bar
---------------------
Incident pulse reflects on both end of the bar endlessly.
The force at both ends of the bar is null. Traction pulse reflects as compression.


.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: default


    test = Waveprop(bb, incw, nstep=2*len(incw), left='free', right='free')
    test.plot()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_005.png
         :alt: Force [N]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_006.png
         :alt: Particule velocity [m/s]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 60-62

It is possible to plot cuts of the space-time diagram, at a given time `t`
or at a given position `x`

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    test.plotcut(x=bb.x[int(n/2)])
    test.plotcut(t=bb.dt*len(incw)/2)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_007.png
         :alt: x=0.25 m
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_008.png
         :alt: t=7.87969e-05 s
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_008.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 66-67

Additional diagrams are also available

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default

    test.plot(typ='dir-D')  # Wave direction (dir) and Displacement (D)
    test.plot(typ='sig-eps')  # Stress (sig) and Strain (eps)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_009.png
         :alt: Wave direction (left or righ)
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_010.png
         :alt: Displacement [m]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_011.png
         :alt: Stress [MPa]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_012.png
         :alt: Strain [Âµdef]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_012.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 71-78

Free-fixed uniform bar
----------------------
Left end is free, right end is fixed:

- compression relfects as compression on fixed end;
- then, compression reflects as traction on free end;
- and finally traction reflects as traction on fixed end;

.. GENERATED FROM PYTHON SOURCE LINES 78-84

.. code-block:: default


    test = Waveprop(bb, incw, nstep=3*len(incw), left='free', right='fixed')
    test.plot()
    test.plot(typ='X')  #  Displacement (X)





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_013.png
         :alt: Force [N]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_014.png
         :alt: Particule velocity [m/s]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_014.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 85-88

Infinite-infinite uniform bar
-----------------------------
Infinite end amounts to anechoic condition: no reflecion of elastic wave.

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: default

    testf = Waveprop(bb, incw, nstep=100, left='infinite', right='infinite')
    testf.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_015.png
         :alt: Force [N]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_016.png
         :alt: Particule velocity [m/s]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_016.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 92-94

Free-free bar with section increase
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: default

    testa = Waveprop(b2, incw, nstep=170, left='free', right='free')
    testa.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_017.png
         :alt: Force [N]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_017.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_018.png
         :alt: Particule velocity [m/s]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_018.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 98-100

Free-free bar with section reduction
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default

    testd = Waveprop(b3, incw, nstep=170, left='free', right='free')
    testd.plot()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_019.png
         :alt: Force [N]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_019.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_020.png
         :alt: Particule velocity [m/s]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_020.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 105-112

Whatever pulse input is possible
--------------------------------
Trapeze
^^^^^^^
For exemple, define a trapeze pulse shape and propagate it in a bar with 
constant section. Right end is ``free`` so the traction wave is reflected as
a compression wave. Left end is ``infinite`` so no reflecion occur.

.. GENERATED FROM PYTHON SOURCE LINES 112-118

.. code-block:: default

    trap = trapezeWave(plateau=5, rise=5)
    testt = Waveprop(bb, trap, nstep=120, left='infinite', right='free')
    testt.plot()
    testt.plotcut(x=0.2)





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_021.png
         :alt: Force [N]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_021.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_022.png
         :alt: Particule velocity [m/s]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_022.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_023.png
         :alt: x=0.2 m
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_023.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 119-121

And why not a sine pulse?
^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 121-136

.. code-block:: default


    sine = np.sin(2*np.pi*np.linspace(0, 1, num=40))
    bar = Barhomo(dx, np.ones(30)*d, E, rho)
    tests = Waveprop(bar, sine, nstep=3*len(sine), left='infinite', right='free')
    tests.plot()
    tests.plotcut(x=0.15)
    tests.plotcut(x=0.20)

    # inc = np.ones(int(np.rint(100e-6/plic.dt)))  # 100Âµs excitation
    # # config proche SHPB
    # essai = Waveprop(plic, inc, nstep=3000)
    # essai.plot()  # c'est pas bon, la traction franchis les interfaces !!!
    # essai.plotcut(x=3)
    # essai.plotcut(x=2.01)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_024.png
         :alt: Force [N]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_024.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_025.png
         :alt: Particule velocity [m/s]
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_025.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_026.png
         :alt: x=0.15 m
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_026.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_0_Waveprop_027.png
         :alt: x=0.2 m
         :srcset: /auto_examples/images/sphx_glr_plot_0_Waveprop_027.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.732 seconds)


.. _sphx_glr_download_auto_examples_plot_0_Waveprop.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_0_Waveprop.py <plot_0_Waveprop.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_0_Waveprop.ipynb <plot_0_Waveprop.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
